//dane:

//S
key = 0b00000000000000010000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111
//key = 0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

//B
nonce = 0b000000000000000100000010000000110000010000000101000001100000011100001000000010010000101000001011
//nonce = 0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

ones = 0b1111_1111_1111_1111_1111_1111_1111_1110
//ones = 0b11111111111111111111111101111111 //według dokumentacji
allnonce = nonce # ones

//S
lfsr = allnonce
//B
nfsr = key

// input xs - liczba w postaci binarnej o maksymalnie 512 bitach
// input i - liczba w postaci dziesiętnej lub liczby w postaci binarnej o 7 bitach
// output - Bit
// funkcja zwraca bit na podanym miejscu 
// liczby w postaci binarnej licząc od 0, gdzie 0 to pierwszy bit
findBit : {n}[n]->[10]-> Bit
findBit xs i = xs@i

//działa

//oblicza z równania S127 w kolejnym takcie na podstawie s w danym takcie (s musi być ju podane w konkretnym takcie)
calculateLastS : {n,m}(fin m, m==1)=>[n]-> [m]

calculateLastS s = [findBit s 0] ^ [findBit s 7] ^ [findBit s 38] ^ [findBit s 70] ^ [findBit s 81] ^ [findBit s 96]

//działa

// s i b musi być podane w konkretnym takcie
//oblicza B127 w następnym takcie
calculateLastB: {n,m,l}(fin l, l == 1)=>[n]->[m]->[l]

calculateLastB s b = [findBit s 0]^[findBit b 0]^[findBit b 26]^[findBit b 56]^[findBit b 91]^[findBit b 96]^([findBit b 3]&&[findBit b 67])^([findBit b 11]&&[findBit b 13])^([findBit b 17]&&[findBit b 18])^([findBit b 27]&&[findBit b 59])^([findBit b 40]&&[findBit b 48])^([findBit b 61]&&[findBit b 65])^([findBit b 68]&&[findBit b 84])^([findBit b 22]&&[findBit b 24]&&[findBit b 25])^([findBit b 70]&&[findBit b 78]&&[findBit b 82])^([findBit b 88]&&[findBit b 92]&&[findBit b 93]&&[findBit b 95])

//działa

// s i b musi być podane w konkretnym takcie
functionH: {n,m,l}(fin l, l==1)=>[n]->[m]->[l]

functionH s b = ([findBit b 12]&&[findBit s 8])^([findBit s 13]&&[findBit s 20])^([findBit b 95]&&[findBit s 42])^([findBit s 60]&&[findBit s 79])^([findBit b 12]&&[findBit b 95]&&[findBit s 94])

//działa

// s i b musi być podane w konkretnym takcie
calculateYT : {n,m,l}(fin l, l==1)=>[n]->[m]->[l]

calculateYT s b = functionH s b ^ [findBit s 93] ^ [findBit b 2] ^ [findBit b 15] ^ [findBit b 36] ^ [findBit b 45] ^ [findBit b 64] ^ [findBit b 73] ^ [findBit b 89]

//działa

functionG: {n}
    (fin n, n>=1, n==128) =>
    [n] -> [n]

functionG x = 1 ^ x^^32 ^ x^^37 ^ x^^72 ^ x^^102 ^ x^^128 ^ (x^^44&&x^^60) ^ (x^^61&&x^^125) ^ (x^^63&&x^^67) ^ (x^^69&&x^^101) ^ (x^^80&&x^^88) ^ (x^^110&&x^^111) ^ (x^^115&&x^^117) ^ (x^^46&&x^^50&&x^^58) ^ (x^^103&&x^^104&&x^^106) ^ (x^^33&&x^^35&&x^^36&&x^^40)

// działa

functionF: {n}
    (fin n, n>=1, n ==128) => 
    [n] -> [n]

functionF x = 1  ^ x^^32 ^ x^^47 ^ x^^58 ^ x^^90 ^ x^^121 ^ x^^128 


// działa


dofuncG : {n}(fin n,n>=1,n==128)=>[n]-> [n]

dofuncG b = functionG b 

//działa

dofuncF : {n}(fin n,n>=1,n==128)=>[n]-> [n]

dofuncF s = functionF s

//działa


//dla NFSR
iter : {n}(fin n, n==128)=>[n]->[inf][n]

iter b = iterate dofuncG b 

//dla LFSR
iter2 : {n}(fin n, n==128)=>[n]->[inf][n]

iter2 s = iterate dofuncF s

//dla NFSR
takeit : {n,l}(fin n, n==128, fin l, l==256)=>[n]->[l][n]

takeit b = take`{l} (iter b)
//dla LFSR
takeit2 : {n,l}(fin n, n==128, fin l, l==256)=>[n]->[l][n]

takeit2 s = take`{l} (iter2 s)

//działa, udało się!!

//funkcja dla większych taktów t>256
takeit_1 : {n,l}(fin n, n==128, fin l, l==1000)=>[n]->[l][n]

takeit_1 b = take`{l} (iter b)

//funkcja dla większych taktów t>256
takeit2_2 : {n,l}(fin n, n==128, fin l, l==1000)=>[n]->[l][n]

takeit2_2 s = take`{l} (iter2 s)

//działa

//funkcja st wypisuje s w podanym takcie t
st_b : {n,l}(fin n, n==128, fin l, l>=1)=>[n]->[l]->[n]

st_b b t = (takeit_1 b) @ t //t musi być jako liczba w postaci binarnej

st_s : {n,l}(fin n, n==128, fin l, l>=1)=>[n]->[l]->[n]

st_s s t = (takeit2_2 s) @ t //t musi być jako liczba w postaci binarnej


//działa

// funkcja dla większych taktów t>256
st_b_1 : {n,l}(fin n, n==128, fin l, l>=1)=>[n]->[l]->[n]

st_b_1 b t = (takeit_1 b) @ t 

st_s_1 : {n,l}(fin n, n==128, fin l, l>=1)=>[n]->[l]->[n]

st_s_1 s t = (takeit2_2 s) @ t 
//działa


//funkcja st_bit bierze na podstawie liczby binarnej bx o takcie t bit numer nr :)

st_bit_b : {n, m, l}(fin n, n==128, fin l, l>= 1, fin m, m>= 1)=>[n]->[m]->[l]->Bit

st_bit_b b t nr = (st_b b t) @ nr // t i nr w liczbie binarnej

//działa

st_bit_s : {n, m, l}(fin n, n==128, fin l, l>= 1, fin m, m>= 1)=>[n]->[m]->[l]->Bit

st_bit_s s t nr = (st_s s t) @ nr // t i nr w liczbie binarnej


// obliczamy S127 w następnym takcie 
// t ma byc do {0,255}
s127t1 : {n,m,l}(fin n, n==128, fin m, m==1, fin l, l>= 1)=>[n]->[n]->[l]->[m]

s127t1 s b t = calculateLastS (st_s s t) ^ calculateYT (st_s s t) (st_b b t)
//działa

// obliczamy B127 w następnym takcie 
// t ma byc do {0,255}
b127t1 : {n,m,l}(fin n, n==128, fin m, m==1, fin l, l>= 1)=>[n]->[n]->[l]->[m]

b127t1 s b t = calculateLastB (st_s s t)(st_b b t) ^ calculateYT (st_s s t) (st_b b t)


//funkcja obliczająca a o podanym j gdzie j {0,63}
aj : {n,m,l}(fin n, n==128, fin m, m==1, fin l, l>=1)=>[n]->[n]->[l]->[m]

aj s b j = calculateYT (st_s s j+256) (st_b b j+256)
//działa

//funkcja obliczająca r o podanym j gdzie j {0,63}
rj : {n,m,l}(fin n, n==128, fin m, m==1, fin l, l>= 1)=>[n]->[n]->[l]->[m]

rj s b j = calculateYT (st_s s j+320) (st_b b j+320)
//działa

//funkcja zmieniająca Bit w liczbe binarną
changeBit : {n}(fin n, n==1)=>Bit->[n]

changeBit bit = if bit == True then 0b1 else 0b0
//działa

// obliczamy S127 w następnym takcie 
// t ma byc do {256,383}
s127t1_1 : {n,m,l}(fin n, n==128, fin m, m==1, fin l, l>= 9)=>[n]->[l]->[m]

s127t1_1 s t = calculateLastS (st_s_1 s t) ^ changeBit (nfsr@(t-256)) 
//działa


// obliczamy B127 w następnym takcie 
// t ma byc do {256,383}
b127t1_1 : {n,m,l}(fin n, n==128, fin m, m==1, fin l, l>= 1)=>[n]->[n]->[l]->[m]

b127t1_1 s b t = calculateLastB (st_s_1 s t)(st_b_1 b t) 
//działa

//message = 0b0000_0000_0000_0001_0000_0010_0000_0011_0000_0100_0000_0101_0000_0110_0000_0111


//generate keystream
zi : {n,m,l}(fin n, n>=1, fin m, m ==1, fin l, l ==128)=>[n]->[l]->[l]->[m]

zi i s b = calculateYT(st_s_1 s i*2+384) (st_b_1 b i*2+384)
//działa

//authentication bit
zi' : {n,m,l}(fin n, n>=1, fin m, m ==1, fin l, l ==128)=>[n]->[l]->[l]->[m]

zi' i s b = calculateYT (st_s_1 s i*2+384+1) (st_b_1 b i*2+384+1)
//działa

//mi
mi : {n,l}(fin n, n>=1,fin l, l==1)=>[n]->[n]->[l]

mi m i= changeBit(m@i) //i jest liczbą dziesietna

//działa

//ci
// i to {0,l}
ci : {n,l,k}(fin n, n>=1,fin l, l==128,fin k, k==1)=>[n]->[n]->[l]->[l]->[k]

ci m i s b = (mi m i) ^ (zi i s b)
// działa

//joinmessage = join [message @ i | i<-tt]

i63 = [0 .. 63]
i64 = [0 .. 64]

//encrypteverybit = join [ci joinmessage i sok bok | i<-i63]
//encrypteverybit = join [ci message i key allnonce | i<-i63]


b64 = [0b0 .. 0b111111]:[64][7]
ajall = join [aj lfsr nfsr j|j<-b64]

rjall = join [rj lfsr nfsr j|j<-b64]

lfsrclocking = last (takeit2 lfsr)

nfsrclocking = last (takeit nfsr)

message = 0b0000000000000001000000100000001100000100000001010000011000000111

mes = me # 0b1



encrypteverybit = join [ci mes i lfsr nfsr | i<-i64]


xxx = [0 .. 127]

lfsr384 = st_s_1 lfsr 0b101111111
nfsr384 = st_b_1 nfsr 0b101111111

b383 = [0b100000000 .. 0b101111111]:[128][9]

s127_do383 = [s127t1_1 lfsr i | i <- b383]

b127_do383 = [b127t1_1 lfsr nfsr i | i <- b383]


b63 = [0b0 .. 0b111110]:[63][7]

rjupdate : {n}(fin n, n == 64)=>[n]->[n]

rjupdate rjall1= join [changeBit (rjall1@(j+1))| j<-b63] #0b0 //# zi' i lfsr nfsr | i <-b63]

rjupdated = take`{64} (iterate rjupdate rjall)

ziall = join [zi' i lfsr nfsr |i<-b63]




